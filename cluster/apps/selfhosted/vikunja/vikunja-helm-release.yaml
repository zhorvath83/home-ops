---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vikunja
  namespace: selfhosted
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: vikunja
      version: 5.3.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    caddy:
      noTls: true
    vikunja:
      config: "service:\n timezone: \"${CLUSTER_TIMEZONE}\""

    image:
      repository: caddy
      tag: 2.4.6-alpine
      pullPolicy: IfNotPresent

    postgresql:
      enabled: false

    persistence:
      files:
        enabled: true
        existingClaim: vikunja-data
        mountpath: /app/vikunja/files

    service:
      main:
        port:
          port: 8080
        annotations:
          prometheus.io/probe: "true"
          prometheus.io/protocol: http

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.middlewares: networking-middleware-chain-cf-auth@kubernetescrd
        hosts:
          - host: "todo.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "todo.${SECRET_DOMAIN}"
            secretName: "${SECRET_DOMAIN/./-}-tls"

    additionalContainers:
      - name: api
        image: vikunja/api:0.18.1
        env:
          - name: VIKUNJA_DATABASE_TYPE
            value: "postgres"
          - name: VIKUNJA_DATABASE_HOST
            value: postgresql.selfhosted.svc.cluster.local
          - name: VIKUNJA_DATABASE_DATABASE
            value: vikunja
          - name: VIKUNJA_DATABASE_USER
            value: vikunja
          - name: VIKUNJA_DATABASE_PASSWORD
            value: ${SECRET_PSQL_VIKUNJA_PWD}
        volumeMounts:
          - name: files
            mountPath: /app/vikunja/files
      - name: frontend
        image: vikunja/frontend:0.18.2

    initContainers:
      database-bootstrap:
        name: database-bootstrap
        image: public.ecr.aws/bitnami/postgresql:13.4.0
        imagePullPolicy: IfNotPresent
        env:
          - name: POSTGRES_PASSWORD
            value: ${SECRET_PSQL_POSTGRES_PWD}
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_DB_PASSWORD
            value: ${SECRET_PSQL_VIKUNJA_PWD}
          - name: POSTGRES_DB_USER
            value: vikunja
          - name: POSTGRES_HOST
            value: postgresql.selfhosted.svc.cluster.local
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB_NAME
            value: vikunja
        command:
          - sh
          - "-c"
          - |
            until pg_isready -h $POSTGRES_HOST -p 5432 -U postgres
            do
              echo "Waiting for PostgreSQL... "
              sleep 5;
            done
            if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -lqt | cut -d \| -f 1 | grep -qw $POSTGRES_DB_NAME; then
              PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
            EOSQL
              echo "database already exist, exiting initContainer"
              exit 0
            else
              echo "Database does not exist. creating...."
              PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
              CREATE DATABASE $POSTGRES_DB_NAME;
              CREATE USER $POSTGRES_DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_DB_PASSWORD';
              GRANT all privileges ON database $POSTGRES_DB_NAME TO $POSTGRES_DB_USER;
              ALTER DATABASE $POSTGRES_DB_NAME OWNER TO $POSTGRES_DB_USER;
              ALTER ROLE $POSTGRES_DB_USER SET client_encoding TO 'utf8';
              ALTER ROLE $POSTGRES_DB_USER SET timezone TO 'UTC';
            EOSQL
            echo "Done"
            fi
