---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ttrss
  namespace: default
  labels:
    app.kubernetes.io/name: ttrss
spec:
  replicas: 1
  strategy:
    # All existing Pods are killed before new ones are created
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: ttrss
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ttrss
    spec:
      securityContext:
        # container requires root to launch and then run as node user 1000
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 1000
        runAsNonRoot: false
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: true
        capabilities:
          drop:
            - ALL
        # runAsNonRoot: true
        # runAsUser: 1000
        # runAsGroup: 1000
        # fsGroup: 1000
        # fsGroupChangePolicy: "OnRootMismatch"
      volumes:
        - name: ttrss-data
          persistentVolumeClaim:
            claimName: ttrss-data

      containers:
        - name: ttrss
          image: wangqiru/ttrss:latest-2022-08-07
          imagePullPolicy: IfNotPresent
          env:
            - name: SELF_URL_PATH
              value: "https://rss.${SECRET_DOMAIN}"
            - name: DB_HOST
              value: postgresql.selfhosted.svc.cluster.local
            - name: DB_NAME
              value: ttrss
            - name: DB_USER
              value: ttrss
            - name: DB_PASS
              value: ${SECRET_PSQL_TTRSS_PWD}
            - name: SESSION_COOKIE_LIFETIME
              value: "168"
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"

          ports:
            - name: http
              containerPort: 80
              protocol: TCP

          volumeMounts:
            - name: ttrss-data
              mountPath: /var/www/feed-icons
          resources:
            requests:
              memory: 50Mi
              cpu: 50m
            limits:
              memory: 512Mi
              cpu: 500m

      initContainers:
        - name: database-bootstrap
          image: bitnami/postgresql:14.2.0-debian-10-r88
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              value: ${SECRET_PSQL_POSTGRES_PWD}
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB_PASSWORD
              value: ${SECRET_PSQL_TTRSS_PWD}
            - name: POSTGRES_DB_USER
              value: ttrss
            - name: POSTGRES_HOST
              value: postgresql.selfhosted.svc.cluster.local
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB_NAME
              value: ttrss
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST -p 5432 -U postgres
              do
                echo "Waiting for PostgreSQL... "
                sleep 5;
              done
              if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -lqt | cut -d \| -f 1 | grep -qw $POSTGRES_DB_NAME; then
                PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
                ALTER USER $POSTGRES_DB_USER WITH NOSUPERUSER;
              EOSQL
                echo "database already exist, exiting initContainer"
                exit 0
              else
                echo "Database does not exist. creating...."
                PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
                CREATE DATABASE $POSTGRES_DB_NAME;
                CREATE USER $POSTGRES_DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_DB_PASSWORD';
                GRANT all privileges ON database $POSTGRES_DB_NAME TO $POSTGRES_DB_USER;
              EOSQL
              echo "Done"
              fi
