---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 19.3.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: prometheus
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST1_IP}
        - ${CLUSTER_HOST2_IP}
        - ${CLUSTER_HOST3_IP}
    kubeScheduler:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST1_IP}
        - ${CLUSTER_HOST2_IP}
        - ${CLUSTER_HOST3_IP}
    kubeProxy:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST1_IP}
        - ${CLUSTER_HOST2_IP}
        - ${CLUSTER_HOST3_IP}
    kubeEtcd:
      enabled: true
      endpoints:
        - ${CLUSTER_HOST1_IP}
        - ${CLUSTER_HOST2_IP}
        - ${CLUSTER_HOST3_IP}
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    # Setting this option to 0 disabled CPU limits
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.middlewares: networking-middleware-chain-cf-auth@kubernetescrd
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      remoteRead:
      - url: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom
        basic_auth:
          username: ${SECRET_GRAFANA_CLOUD_INSTANCE}
          password: ${SECRET_GRAFANA_CLOUD_APIKEY}
      remoteWrite:
      - url: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
        basic_auth:
          username: ${SECRET_GRAFANA_CLOUD_INSTANCE}
          password: ${SECRET_GRAFANA_CLOUD_APIKEY}
      ## Enable/Disable Grafana dashboards provisioning for prometheus remote write feature
      remoteWriteDashboards: true
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: false
        storageSpec: {}
