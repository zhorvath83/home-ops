---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: freshrss
  namespace: default
  labels:
    app.kubernetes.io/name: freshrss
spec:
  replicas: 1
  strategy:
    # All existing Pods are killed before new ones are created
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: freshrss
  template:
    metadata:
      labels:
        app.kubernetes.io/name: freshrss
    spec:
      securityContext:
        # container requires root to launch and then run as node user 1000
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: false
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL

      volumes:
        - name: freshrss-data
          persistentVolumeClaim:
            claimName: freshrss-data
        - name: freshrss-config-custom
          configMap:
            name: freshrss-config-custom
        - name: freshrss-config-user-custom
          configMap:
            name: freshrss-config-user-custom

      containers:
        - name: freshrss
          image: freshrss/freshrss:1.21.0-alpine
          imagePullPolicy: IfNotPresent
          # https://github.com/FreshRSS/FreshRSS/tree/edge/Docker#docker-compose
          env:
            - name: FRESHRSS_INSTALL
              value: "--default_user ${SECRET_OWNER_USERNAME}"
            - name: FRESHRSS_USER
              value: "--user ${SECRET_OWNER_USERNAME}"
            - name: TZ
              value: "${CLUSTER_TIMEZONE}"
            - name: CRON_MIN
              value: "*/20"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: freshrss-data
              mountPath: /var/www/FreshRSS/data
              subPath: data
            - name: freshrss-data
              mountPath: /var/www/FreshRSS/extensions
              subPath: extensions
          resources:
            requests:
              memory: 50Mi
              cpu: 50m
            limits:
              memory: 512Mi
              cpu: 500m

      initContainers:
        - name: copy-freshrss-config
          image: instrumentisto/rsync-ssh:alpine3.16
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -exec
            - |
              rsync -av /tmp/config.custom.php /var/www/FreshRSS/data/config.custom.php
              rsync -av /tmp/config-user.custom.php /var/www/FreshRSS/data/config-user.custom.php
          volumeMounts:
            - name: freshrss-data
              mountPath: /var/www/FreshRSS/data
              subPath: data
            - name: freshrss-config-custom
              mountPath: /tmp/config.custom.php
              subPath: config.custom.php
            - name: freshrss-config-user-custom
              mountPath: /tmp/config-user.custom.php
              subPath: config-user.custom.php
        - name: database-bootstrap
          image: bitnami/postgresql:14.2.0-debian-10-r88
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              value: ${SECRET_PSQL_POSTGRES_PWD}
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB_PASSWORD
              value: ${SECRET_PSQL_FRESHRSS_PWD}
            - name: POSTGRES_DB_USER
              value: freshrss
            - name: POSTGRES_HOST
              value: postgresql-15.default.svc.cluster.local
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB_NAME
              value: freshrss
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST -p 5432 -U postgres
              do
                echo "Waiting for PostgreSQL... "
                sleep 5;
              done
              if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -lqt | cut -d \| -f 1 | grep -qw $POSTGRES_DB_NAME; then
                PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
                ALTER USER $POSTGRES_DB_USER WITH NOSUPERUSER;
              EOSQL
                echo "database already exist, exiting initContainer"
                exit 0
              else
                echo "Database does not exist. creating...."
                PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER <<-EOSQL
                CREATE DATABASE $POSTGRES_DB_NAME;
                CREATE USER $POSTGRES_DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_DB_PASSWORD';
                GRANT all privileges ON database $POSTGRES_DB_NAME TO $POSTGRES_DB_USER;
              EOSQL
              echo "Done"
              fi
