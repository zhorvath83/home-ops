---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app homepage
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 4.4.0
      sourceRef:
        kind: HelmRepository
        name: app-template
        namespace: flux-system

  install:
    createNamespace: true
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false

  values:
    defaultPodOptions:
      automountServiceAccountToken: true
      enableServiceLinks: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile:
          type: RuntimeDefault

    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: "true"
        type: statefulset

        containers:
          app:
            image:
              repository: ghcr.io/gethomepage/homepage
              tag: v1.5.0@sha256:e7fc26f914cf5e7dcd6c566e24ca218addb879aa76478ad4a553b1f9ae48b1d7

            env:
              TZ: Europe/Budapest
              HOMEPAGE_ALLOWED_HOSTS: &host "dash.${PUBLIC_DOMAIN}"
              LOG_TARGETS: stdout
              # PUID: "10001"
              # PGID: "10001"
            envFrom:
              - secretRef:
                  name: "{{ .Release.Name }}-secret"

            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true

            securityContext:
              privileged: false
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

            resources:
              requests:
                cpu: 5m
                memory: 100Mi
              limits:
                memory: 200Mi

    rbac:
      roles:
        *app :
          type: ClusterRole
          rules:
            - apiGroups:
                - ""
              resources:
                - namespaces
                - pods
                - nodes
              verbs:
                - get
                - list
            - apiGroups:
                - networking.k8s.io
              resources:
                - ingresses
              verbs:
                - get
                - list
            - apiGroups:
                - ""
              resources:
                - namespaces
                - pods
                - nodes
              verbs:
                - get
                - list
            - apiGroups:
                - extensions
                - networking.k8s.io
              resources:
                - ingresses
              verbs:
                - get
                - list
            # - apiGroups:
            #     - traefik.io
            #   resources:
            #     - ingressroutes
            #   verbs:
            #     - get
            #     - list
            - apiGroups:
                - gateway.networking.k8s.io
              resources:
                - httproutes
                - gateways
              verbs:
                - get
                - list
            - apiGroups:
                - metrics.k8s.io
              resources:
                - nodes
                - pods
              verbs:
                - get
                - list
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions/status
              verbs:
                - get

      bindings:
        *app :
          type: ClusterRoleBinding
          roleRef:
            identifier: *app
          subjects:
            - identifier: *app

    serviceAccount:
      # allow scraping of k8s resources for widget
      *app : {}

    service:
      app:
        controller: *app
        ports:
          http:
            port: 3000

    ingress:
      app:
        className: "traefik"
        annotations:
          external-dns.alpha.kubernetes.io/target: "tunnel.${PUBLIC_DOMAIN}"
          # traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-traefik-middleware-chain-no-auth@kubernetescrd"
        hosts:
          - host: *host
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      config-files:
        type: secret
        name: "{{ .Release.Name }}-config-files-secret"
        globalMounts:
          - path: /app/config/bookmarks.yaml
            subPath: bookmarks.yaml
          - path: /app/config/docker.yaml
            subPath: docker.yaml
          - path: /app/config/kubernetes.yaml
            subPath: kubernetes.yaml
          - path: /app/config/proxmox.yaml
            subPath: proxmox.yaml
          - path: /app/config/services.yaml
            subPath: services.yaml
          - path: /app/config/settings.yaml
            subPath: settings.yaml
          - path: /app/config/widgets.yaml
            subPath: widgets.yaml
          - path: /app/config/custom.css
            subPath: custom.css
          - path: /app/config/custom.js
            subPath: custom.js
