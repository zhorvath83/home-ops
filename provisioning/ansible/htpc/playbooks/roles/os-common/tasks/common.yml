---
- name: Locale
  block:
    - name: Locale | Set timezone
      community.general.timezone:
        name: "{{ timezone | default('Etc/UTC') }}"

- name: Networking
  block:
    - name: Set hostname to inventory hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
    - name: Update /etc/hosts to include inventory hostname
      lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1"
        line: "127.0.1.1  {{ inventory_hostname }}"
    - name: Disable IPv6
      ansible.posix.sysctl:
        name: "{{ line.name }}"
        value: "{{ line.value }}"
        reload: true
      loop:
        - name: net.ipv6.conf.all.disable_ipv6
          value: 1
        - name: net.ipv6.conf.default.disable_ipv6
          value: 1
        - name: net.ipv6.conf.lo.disable_ipv6
          value: 1
        - name: net.ipv6.conf.{{ network_interface | default(ansible_default_ipv4.interface) }}.disable_ipv6
          value: 1
      loop_control:
        loop_var: line
      when: disable_ipv6
      become: true
      ignore_errors: true

- name: Prevent SD card wear
  block:
    - name: Disable SWAP
      ansible.builtin.include_role:
        name: geerlingguy.swap
      vars:
        swap_file_state: absent

    - name: Log2RAM
      ansible.builtin.include_role:
        name: chzerv.log2ram
      vars:
        log2ram_enable_on_boot: true
        log2ram_reboot_after_install: false
        log2ram_size: "256M"
        log2ram_use_rsync: "true"
        log2ram_mail: "false"
        log2ram_path_disk: "/var/log"
        log2ram_compression_algorithm: "lz4"

    - name: Disable core files
      ansible.builtin.lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^DumpCore='
        insertafter: '^#DumpCore='
        line: DumpCore=no

    - name: Retrieve rootfs partition UUID
      command: |
        blkid -s PARTUUID -o value -t LABEL={{ rootfs_label | default("rootfs")  }}
      changed_when: no
      register: rootfs_uuid

    - name: Set partition_uuid fact
      set_fact:
        partition_uuid: "{{ rootfs_uuid.stdout }}"

    - name: Add options to /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: "^PARTUUID={{ partition_uuid }}"
        line: "PARTUUID={{ partition_uuid }} / ext4 defaults,nodiratime,noatime,commit=150 0 1"

    - name: Mount /tmp as tmpfs
      mount:
        path: /tmp
        src: tmpfs
        fstype: tmpfs
        opts: "defaults,noatime,nosuid,nodev,mode=1777,size=256M"
        state: present

- name: config.txt
  block:
    - name: "Adjust {{ rpi_boot_config_file }}"
      ansible.builtin.lineinfile:
        line: '{{ item }}'
        dest: "{{ rpi_boot_config_file }}"
        regexp: "^{{ item }}"
        state: "absent"
      with_items: '{{ boot_config_remove_lines }}'
      register: _boot_config_remove_lines
    - name: "Adjust {{ rpi_boot_config_file }}"
      ansible.builtin.lineinfile:
        line: '{{ item.key }}={{ item.value }}'
        dest: "{{ rpi_boot_config_file }}"
        regexp: "^{{ item.key }}="
      with_dict: '{{ boot_config_entries }}'
      register: _boot_config_entries
    - name: "Adjust {{ rpi_boot_config_file }}"
      ansible.builtin.lineinfile:
        line: '{{ item }}'
        dest: "{{ rpi_boot_config_file }}"
        regexp: "^{{ item }}"
      with_items: '{{ boot_config_insert_lines }}'
      register: _boot_config_insert_lines

    # - name: "Restart machine"  # noqa 503
    #   ansible.builtin.reboot:
    #     msg: "Reboot by Ansible, because {{ rpi_boot_config_file }} config changed."
    #     reboot_timeout: 300   # (= 5 minutes)
    #   when: _boot_config.changed or _boot_config_insert_lines.changed


- name: cmdline.txt
  block:
    - name: Read cmdline.txt
      slurp:
        src: /boot/cmdline.txt
      register: cmdline_current
      when: cmdline_settings is defined

    - name: Parse cmdline.txt
      set_fact:
        cmdline: "{{ (cmdline_current['content'] | b64decode).split() }}"
      when: cmdline_settings is defined

    - name: Prepare filter for cmdline.txt options to remove
      set_fact:
        cmdline_remove: []
      when: cmdline_settings is defined

    - name: Assemble filter for cmdline.txt options to remove
      set_fact:
        cmdline_remove: "{{ cmdline_remove + [option.value] }}"
      loop: "{{ cmdline_settings }}"
      loop_control:
        loop_var: option
      when: cmdline_settings is defined and option.state is defined and option.state == 'absent'

    - name: Prepare list for cmdline.txt options to add
      set_fact:
        cmdline_add: []
      when: cmdline_settings is defined

    - name: Assemble cmdline.txt options to add
      set_fact:
        cmdline_add: "{{ cmdline_add + [option.name + '=' + option.value] }}"
      when: cmdline_settings is defined and (option.state is not defined or option.state == 'present')
      loop: "{{ cmdline_settings }}"
      loop_control:
        loop_var: option

    - name: Assemble new kernel command line
      set_fact:
        cmdline_new: "{{ cmdline + cmdline_add }}"
      when: cmdline_settings is defined

    - name: Write new kernel command line
      copy:
        content: "{{ cmdline_new | difference(cmdline_remove) | join(' ') }}"
        dest: /boot/cmdline.txt
      when: cmdline_settings is defined
      become: true

- name: Installing standalone packages
  block:
    - name: Packages | Install required packages
      ansible.builtin.apt:
        name: "{{ standalone_packages | default([]) }}"
        state: present
        update_cache: true
    - name: Packages | Remove leaf packages
      ansible.builtin.apt:
        autoremove: true
    - name: Update Raspberry Pi OS
      apt:
        upgrade: dist
        update_cache: yes
        cache_valid_time: 3600

- name: Add {{ inventory_username }} user gpio, video, audio and render groups
  user:
    name: "{{ inventory_username }}"
    append: yes
    groups:
      - gpio
      - video
      - audio
      - render
